DROP TRIGGER IF EXISTS PROG_ALTER ON COURSE;
CREATE OR REPLACE FUNCTION alter_progress()
RETURNS TRIGGER AS
$$
DECLARE
	course_code varchar(255);
	course_module varchar(255);
	course_lesson varchar(255);
	course_points varchar(255);
BEGIN
	course_code := new.LANG;
	course_module:= course_code||'_module';
	course_lesson:=course_code||'_lesson';
	course_points:=course_code||'_points';
	EXECUTE format('ALTER TABLE PROGRESS ADD COLUMN %I boolean', course_code);
	EXECUTE format('ALTER TABLE PROGRESS ADD COLUMN %I varchar(255)', course_module);
	EXECUTE format('ALTER TABLE PROGRESS ADD COLUMN %I varchar(255)', course_lesson);
	EXECUTE format('ALTER TABLE PROGRESS ADD COLUMN %I int', course_points);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER PROG_ALTER
AFTER INSERT ON COURSE
FOR EACH ROW
EXECUTE FUNCTION alter_progress();

DROP TRIGGER IF EXISTS PROG_CREATE ON STUDENT;
CREATE OR REPLACE FUNCTION initialize_progress()
RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO PROGRESS (PROGRESS_ID) VALUES (NEW.STUDENT_ID);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER PROG_CREATE
AFTER INSERT ON STUDENT
FOR EACH ROW
EXECUTE FUNCTION initialize_progress();

DROP TRIGGER IF EXISTS UPD_INSERT_MOD ON MODULES;
CREATE OR REPLACE FUNCTION upd_mod()
RETURNS TRIGGER AS
$$
BEGIN
	UPDATE COURSE set NUM_MODULES=NUM_MODULES+1 where COURSE_ID=NEW.PARENT_COURSE;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER UPD_INSERT_MOD
AFTER INSERT ON MODULES
FOR EACH ROW
EXECUTE FUNCTION upd_mod();

DROP TRIGGER IF EXISTS UPD_INSERT_LESSON ON LESSON;
CREATE OR REPLACE FUNCTION upd_lesson()
RETURNS TRIGGER AS
$$
DECLARE
	diff varchar(255);
	code int;
BEGIN
	SELECT DIFFICULTY into diff from MODULES where MODULE_ID=NEW.PARENT_MODULE;
	UPDATE LESSON set DIFFICULTY=diff where LESSON_ID=NEW.LESSON_ID;
	SELECT PARENT_COURSE into code from MODULES where MODULE_ID=NEW.PARENT_MODULE;
	UPDATE MODULES set NUM_LESSONS=NUM_LESSONS+1 where MODULE_ID=NEW.PARENT_MODULE;
	UPDATE COURSE set NUM_LESSONS=NUM_LESSONS+1 where COURSE_ID=code;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER UPD_INSERT_LESSON
AFTER INSERT ON LESSON
FOR EACH ROW
EXECUTE FUNCTION upd_lesson();